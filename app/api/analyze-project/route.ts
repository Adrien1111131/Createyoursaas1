import { NextRequest, NextResponse } from 'next/server'
import { Opportunity } from '@/lib/grok-service'

const XAI_API_KEY = process.env.XAI_API_KEY || process.env.GROK_API_KEY
const GROK_API_URL = 'https://api.x.ai/v1/chat/completions'
const GROK_MODEL = 'grok-4-0709'

interface AnalyzeProjectRequest {
  opportunity: Opportunity
}

// Construire le prompt optimis√© pour un CDC concis et actionnable
const buildAnalysisPrompt = (opportunity: Opportunity): string => {
  return `G√©n√®re un guide de d√©veloppement concis pour ce projet SaaS :

PROJET : ${opportunity.nom}
Description : ${opportunity.description}
Probl√®me : ${opportunity.probleme_resolu}
Stack : ${opportunity.stack_technique}
Complexit√© : ${opportunity.complexite}
Temps : ${opportunity.temps_dev}
Type march√© : ${opportunity.type_marche}

CONSIGNES STRICTES :
1. DESCRIPTION DU PROJET (2-3 phrases max)
   - Que fait exactement le produit
   - Adaptations sp√©cifiques pour le march√© fran√ßais si pertinentes

2. √âTAPES DE D√âVELOPPEMENT (liste num√©rot√©e claire)
   - √âtapes concr√®tes et actionables
   - Ordre logique de d√©veloppement
   - 6-8 √©tapes maximum

3. STACK TECHNIQUE PR√âCISE
   - Frontend : [technologie exacte]
   - Backend : [technologie exacte] 
   - Base de donn√©es : [choix pr√©cis]
   - APIs externes : [liste des APIs n√©cessaires]
   - Authentification : [solution]
   - Paiements : [si applicable]
   - H√©bergement : [recommandation]

INTERDICTIONS :
- Pas de blabla marketing
- Pas de r√©p√©tition des informations d√©j√† connues
- Pas d'analyse de march√© (d√©j√† fournie)
- Pas de recommandations business
- Seulement les infos techniques et √©tapes pratiques

FORMAT : Texte structur√©, direct, actionnable.`
}

export async function POST(request: NextRequest) {
  try {
    const { opportunity }: AnalyzeProjectRequest = await request.json()
    
    if (!opportunity) {
      return NextResponse.json(
        { error: 'Opportunit√© manquante' },
        { status: 400 }
      )
    }

    // V√©rifier la cl√© API
    if (!XAI_API_KEY) {
      return NextResponse.json(
        { error: 'Configuration API manquante' },
        { status: 500 }
      )
    }

    const prompt = buildAnalysisPrompt(opportunity)
    console.log('üîç Analyse du projet avec Grok...')

    const response = await fetch(GROK_API_URL, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${XAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: GROK_MODEL,
        messages: [
          {
            role: 'system',
            content: `Tu es un d√©veloppeur senior qui r√©dige des guides techniques concis et actionables.

OBJECTIF : Fournir uniquement les informations pratiques pour d√©velopper le projet.

STRUCTURE OBLIGATOIRE :
1. DESCRIPTION DU PROJET (2-3 phrases maximum)
2. √âTAPES DE D√âVELOPPEMENT (liste num√©rot√©e, 6-8 √©tapes max)
3. STACK TECHNIQUE (format structur√© avec technologies pr√©cises)

STYLE REQUIS :
- Direct et technique, sans fioritures
- Comme un README de projet GitHub
- Pas de marketing ou de blabla
- Informations concr√®tes et actionables uniquement

INTERDICTIONS STRICTES :
- Pas d'introduction longue
- Pas d'analyse de march√©
- Pas de recommandations business
- Pas de r√©p√©titions
- Pas de paragraphes verbeux

FORMAT : Texte structur√©, concis, technique.`
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        stream: false,
        temperature: 0.1,
        max_tokens: 1500
      })
    })

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}))
      console.error('‚ùå Erreur API Grok:', response.status, errorData)
      
      return NextResponse.json(
        { error: `Erreur API Grok: ${response.status}` },
        { status: response.status }
      )
    }

    const data = await response.json()
    const cdc = data.choices[0].message.content.trim()
    
    console.log('‚úÖ CDC g√©n√©r√© avec succ√®s')
    
    return NextResponse.json({
      success: true,
      cdc: cdc,
      projectId: opportunity.id
    })

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'analyse:', error)
    return NextResponse.json(
      { error: 'Erreur interne du serveur' },
      { status: 500 }
    )
  }
}
