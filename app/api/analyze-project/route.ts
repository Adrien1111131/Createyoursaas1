import { NextRequest, NextResponse } from 'next/server'
import { Opportunity } from '@/lib/grok-service'

const XAI_API_KEY = process.env.XAI_API_KEY || process.env.GROK_API_KEY
const GROK_API_URL = 'https://api.x.ai/v1/chat/completions'
const GROK_MODEL = 'grok-4-0709'

interface AnalyzeProjectRequest {
  opportunity: Opportunity
}

// Construire le prompt pour l'analyse approfondie du projet
const buildAnalysisPrompt = (opportunity: Opportunity): string => {
  return `Analyse ce projet SaaS pour cr√©er un cahier des charges clair et naturel :

PROJET : ${opportunity.nom}
Description : ${opportunity.description}
Probl√®me r√©solu : ${opportunity.probleme_resolu}
March√© cible : ${opportunity.type_marche}
Revenus estim√©s : ${opportunity.mrr_arr}
Stack technique : ${opportunity.stack_technique}
Complexit√© : ${opportunity.complexite}
Temps de d√©veloppement : ${opportunity.temps_dev}

CONTEXTE FRAN√áAIS :
Ce projet vise sp√©cifiquement le march√© francophone. Il doit respecter les r√©glementations fran√ßaises (RGPD, CNIL) et s'adapter aux habitudes des utilisateurs fran√ßais.

OBJECTIF :
Cr√©er un document de travail pratique qui guide le d√©veloppement √©tape par √©tape, avec un langage naturel et accessible.`
}

export async function POST(request: NextRequest) {
  try {
    const { opportunity }: AnalyzeProjectRequest = await request.json()
    
    if (!opportunity) {
      return NextResponse.json(
        { error: 'Opportunit√© manquante' },
        { status: 400 }
      )
    }

    // V√©rifier la cl√© API
    if (!XAI_API_KEY) {
      return NextResponse.json(
        { error: 'Configuration API manquante' },
        { status: 500 }
      )
    }

    const prompt = buildAnalysisPrompt(opportunity)
    console.log('üîç Analyse du projet avec Grok...')

    const response = await fetch(GROK_API_URL, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${XAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: GROK_MODEL,
        messages: [
          {
            role: 'system',
            content: `Tu es un chef de projet exp√©riment√© qui r√©dige des cahiers des charges clairs et naturels.

STYLE D'√âCRITURE :
- Langage naturel et fluide, comme si tu expliquais le projet √† un coll√®gue
- Paragraphes bien structur√©s avec des transitions logiques
- √âviter le jargon technique excessif
- Ton professionnel mais accessible

STRUCTURE ATTENDUE :

1. R√âSUM√â DU PROJET
Pr√©sente le projet de mani√®re claire et engageante. Explique pourquoi ce projet est important et comment il va aider les utilisateurs. Utilise un langage accessible qui permet √† n'importe qui de comprendre l'enjeu.

2. CAHIER DES CHARGES TECHNIQUE
D√©taille les aspects techniques de mani√®re organis√©e :
- Architecture et technologies choisies (avec justifications)
- Fonctionnalit√©s principales expliqu√©es simplement
- Contraintes techniques et solutions envisag√©es
- Planning de d√©veloppement r√©aliste

3. OPPORTUNIT√â FRANCOPHONE
Explique sp√©cifiquement pourquoi ce projet a du sens sur le march√© fran√ßais :
- Besoins sp√©cifiques des utilisateurs fran√ßais
- Avantages concurrentiels sur ce march√©
- R√©glementations fran√ßaises √† respecter (RGPD, etc.)
- Strat√©gie de lancement adapt√©e au contexte fran√ßais

IMPORTANT : √âcris de mani√®re fluide et naturelle, comme si tu pr√©sentais le projet lors d'une r√©union. √âvite les listes √† puces excessives et privil√©gie des paragraphes bien r√©dig√©s.`
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        stream: false,
        temperature: 0.3,
        max_tokens: 4000
      })
    })

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}))
      console.error('‚ùå Erreur API Grok:', response.status, errorData)
      
      return NextResponse.json(
        { error: `Erreur API Grok: ${response.status}` },
        { status: response.status }
      )
    }

    const data = await response.json()
    const cdc = data.choices[0].message.content.trim()
    
    console.log('‚úÖ CDC g√©n√©r√© avec succ√®s')
    
    return NextResponse.json({
      success: true,
      cdc: cdc,
      projectId: opportunity.id
    })

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'analyse:', error)
    return NextResponse.json(
      { error: 'Erreur interne du serveur' },
      { status: 500 }
    )
  }
}
