import { NextRequest, NextResponse } from 'next/server'

const XAI_API_KEY = process.env.XAI_API_KEY || process.env.GROK_API_KEY
const GROK_API_URL = 'https://api.x.ai/v1/chat/completions'
const GROK_MODEL = 'grok-4-0709'

interface ChatMessage {
  id: string
  role: 'user' | 'assistant'
  content: string
  timestamp: Date
}

interface ProjectDefinition {
  nom?: string
  description?: string
  probleme_resolu?: string
  utilisateurs_cibles?: string
  fonctionnalites_cles?: string[]
  stack_preferee?: string
  niveau_technique?: string
  contraintes?: string
  temps_disponible?: string
}

interface CreateProjectRequest {
  messages?: ChatMessage[]
  userMessage?: string
  currentDefinition?: ProjectDefinition
  action?: 'finalize'
  projectDefinition?: ProjectDefinition
}

// Construire le prompt pour comprendre et d√©finir le projet
const buildProjectDefinitionPrompt = (
  userMessage: string, 
  currentDefinition: ProjectDefinition,
  messages: ChatMessage[]
): string => {
  const missingFields = []
  if (!currentDefinition.nom) missingFields.push('nom')
  if (!currentDefinition.description) missingFields.push('description')
  if (!currentDefinition.probleme_resolu) missingFields.push('probl√®me r√©solu')
  if (!currentDefinition.utilisateurs_cibles) missingFields.push('utilisateurs cibles')
  if (!currentDefinition.stack_preferee) missingFields.push('stack technique')
  if (!currentDefinition.niveau_technique) missingFields.push('niveau technique')
  if (!currentDefinition.temps_disponible) missingFields.push('temps disponible')
  
  const nextField = missingFields[0]
  const progress = `${7 - missingFields.length}/7 informations collect√©es`
  
  return `üéØ TU ES UNE IA SP√âCIALIS√âE DANS LA D√âFINITION DE PROJETS SaaS

üí¨ MESSAGE UTILISATEUR : "${userMessage}"

üìä PROGRESSION : ${progress}
üìã PROCHAINE INFO √Ä COLLECTER : ${nextField || 'PROJET COMPLET !'}

üìã D√âFINITION ACTUELLE DU PROJET :
${JSON.stringify(currentDefinition, null, 2)}

üéØ TON R√îLE DE D√âFINITION DE PROJET :

üö® **R√àGLE ABSOLUE** : Tu DOIS progresser √† chaque √©change !
- Si l'utilisateur a r√©pondu √† ta question, ACCEPTE sa r√©ponse et passe √† la suivante
- Ne repose JAMAIS la m√™me question deux fois
- Sois EFFICACE et va √† l'essentiel

üìã **INFORMATIONS √Ä COLLECTER DANS L'ORDRE** :
1. ‚úÖ **Nom du projet** ${currentDefinition.nom ? '‚úì FAIT' : '‚Üê PROCHAINE QUESTION'}
2. ‚úÖ **Description/Id√©e** ${currentDefinition.description ? '‚úì FAIT' : '‚Üê PROCHAINE QUESTION'}
3. ‚úÖ **Probl√®me r√©solu** ${currentDefinition.probleme_resolu ? '‚úì FAIT' : '‚Üê PROCHAINE QUESTION'}
4. ‚úÖ **Utilisateurs cibles** ${currentDefinition.utilisateurs_cibles ? '‚úì FAIT' : '‚Üê PROCHAINE QUESTION'}
5. ‚úÖ **Stack technique** ${currentDefinition.stack_preferee ? '‚úì FAIT' : '‚Üê PROCHAINE QUESTION'}
6. ‚úÖ **Niveau technique** ${currentDefinition.niveau_technique ? '‚úì FAIT' : '‚Üê PROCHAINE QUESTION'}
7. ‚úÖ **Temps disponible** ${currentDefinition.temps_disponible ? '‚úì FAIT' : '‚Üê PROCHAINE QUESTION'}

üéØ **INSTRUCTIONS SELON LA SITUATION** :

${nextField === 'nom' ? `
üî• DEMANDE LE NOM DU PROJET :
"Super ! J'ai bien compris ton id√©e. Comment veux-tu appeler ton projet ?"
` : ''}

${nextField === 'description' ? `
üî• DEMANDE LA DESCRIPTION :
"Parfait ! Maintenant, peux-tu me d√©crire ton id√©e de projet en quelques phrases ?"
` : ''}

${nextField === 'probl√®me r√©solu' ? `
üî• DEMANDE LE PROBL√àME R√âSOLU :
"Excellent ! Quel probl√®me concret ton projet va-t-il r√©soudre ?"
` : ''}

${nextField === 'utilisateurs cibles' ? `
üî• DEMANDE LES UTILISATEURS CIBLES :
"Parfait ! Qui sont tes utilisateurs id√©aux ? (particuliers, entreprises, freelances...)"
` : ''}

${nextField === 'stack technique' ? `
üî• DEMANDE LA STACK TECHNIQUE :
"Super ! As-tu une pr√©f√©rence pour la technologie ? (React, Vue, Python, PHP... ou 'pas de pr√©f√©rence')"
` : ''}

${nextField === 'niveau technique' ? `
üî• DEMANDE LE NIVEAU TECHNIQUE :
"Parfait ! Quel est ton niveau en d√©veloppement ? (d√©butant, interm√©diaire, expert)"
` : ''}

${nextField === 'temps disponible' ? `
üî• DEMANDE LE TEMPS DISPONIBLE :
"Excellent ! Combien de temps peux-tu consacrer au d√©veloppement ? (quelques heures/semaine, temps plein...)"
` : ''}

${!nextField ? `
üéâ PROJET COMPLET ! F√âLICITE L'UTILISATEUR :
"Parfait ! J'ai toutes les informations n√©cessaires pour cr√©er ton guide de d√©veloppement personnalis√© ! üéâ

R√©capitulatif de ton projet :
- **Nom** : ${currentDefinition.nom}
- **Description** : ${currentDefinition.description}
- **Probl√®me r√©solu** : ${currentDefinition.probleme_resolu}
- **Utilisateurs** : ${currentDefinition.utilisateurs_cibles}
- **Stack** : ${currentDefinition.stack_preferee}
- **Niveau** : ${currentDefinition.niveau_technique}
- **Temps** : ${currentDefinition.temps_disponible}

Tu peux maintenant cliquer sur 'Cr√©er mon guide de d√©veloppement' ! üöÄ"
` : ''}

üö® **R√àGLES STRICTES** :
1. Une seule question √† la fois
2. Accepte toute r√©ponse raisonnable (ne sois pas perfectionniste)
3. Progresse TOUJOURS vers la prochaine info
4. Sois encourageant et positif
5. Si toutes les infos sont collect√©es, f√©licite et r√©capitule

R√âPONDS MAINTENANT selon les instructions ci-dessus !`
}

// Analyser si le projet est complet
const isProjectComplete = (definition: ProjectDefinition): boolean => {
  const requiredFields = [
    'nom', 'description', 'probleme_resolu', 'utilisateurs_cibles',
    'stack_preferee', 'niveau_technique', 'temps_disponible'
  ]
  
  return requiredFields.every(field => {
    const value = definition[field as keyof ProjectDefinition]
    return value && value.toString().trim().length > 0
  })
}

// Extraire les informations du message utilisateur de mani√®re plus intelligente
const extractProjectInfo = (userMessage: string, currentDefinition: ProjectDefinition, messages: ChatMessage[]): ProjectDefinition => {
  const updated = { ...currentDefinition }
  const message = userMessage.toLowerCase()
  
  // Analyser le contexte de la derni√®re question de l'IA
  const lastAssistantMessage = messages.slice().reverse().find(m => m.role === 'assistant')?.content.toLowerCase() || ''
  
  // Si l'IA demandait le nom du projet
  if (lastAssistantMessage.includes('nom') || lastAssistantMessage.includes('appelle') || lastAssistantMessage.includes('s\'appelle')) {
    if (!updated.nom && userMessage.trim().length > 0) {
      updated.nom = userMessage.trim()
    }
  }
  
  // Si l'IA demandait la description ou l'id√©e
  if (lastAssistantMessage.includes('id√©e') || lastAssistantMessage.includes('description') || lastAssistantMessage.includes('projet')) {
    if (!updated.description && userMessage.length > 10) {
      updated.description = userMessage.trim()
    }
  }
  
  // Si l'IA demandait le probl√®me r√©solu
  if (lastAssistantMessage.includes('probl√®me') || lastAssistantMessage.includes('r√©sou')) {
    if (!updated.probleme_resolu && userMessage.length > 10) {
      updated.probleme_resolu = userMessage.trim()
    }
  }
  
  // Si l'IA demandait les utilisateurs cibles
  if (lastAssistantMessage.includes('utilisateur') || lastAssistantMessage.includes('client') || lastAssistantMessage.includes('cible')) {
    if (!updated.utilisateurs_cibles && userMessage.length > 5) {
      updated.utilisateurs_cibles = userMessage.trim()
    }
  }
  
  // Si l'IA demandait le niveau technique
  if (lastAssistantMessage.includes('niveau') || lastAssistantMessage.includes('exp√©rience') || lastAssistantMessage.includes('d√©veloppement')) {
    if (message.includes('d√©butant') || message.includes('novice') || message.includes('jamais')) {
      updated.niveau_technique = 'D√©butant'
    } else if (message.includes('interm√©diaire') || message.includes('confirm√©') || message.includes('quelques')) {
      updated.niveau_technique = 'Interm√©diaire'
    } else if (message.includes('expert') || message.includes('avanc√©') || message.includes('exp√©riment√©')) {
      updated.niveau_technique = 'Expert'
    } else if (!updated.niveau_technique) {
      // Si pas de mot-cl√© sp√©cifique, essayer de deviner
      updated.niveau_technique = userMessage.trim()
    }
  }
  
  // Si l'IA demandait la stack technique
  if (lastAssistantMessage.includes('stack') || lastAssistantMessage.includes('technologie') || lastAssistantMessage.includes('technique')) {
    if (message.includes('react') || message.includes('next')) {
      updated.stack_preferee = 'React/Next.js'
    } else if (message.includes('vue')) {
      updated.stack_preferee = 'Vue.js'
    } else if (message.includes('python')) {
      updated.stack_preferee = 'Python'
    } else if (message.includes('php')) {
      updated.stack_preferee = 'PHP'
    } else if (message.includes('node')) {
      updated.stack_preferee = 'Node.js'
    } else if (!updated.stack_preferee && userMessage.length > 3) {
      updated.stack_preferee = userMessage.trim()
    }
  }
  
  // Si l'IA demandait le temps disponible
  if (lastAssistantMessage.includes('temps') || lastAssistantMessage.includes('dur√©e') || lastAssistantMessage.includes('consacrer')) {
    if (!updated.temps_disponible && userMessage.length > 3) {
      updated.temps_disponible = userMessage.trim()
    }
  }
  
  // Si c'est le premier message et qu'il est long, c'est probablement la description
  if (messages.length <= 2 && !updated.description && userMessage.length > 20) {
    updated.description = userMessage.trim()
  }
  
  return updated
}

// G√©n√©rer un projet finalis√© compatible avec le syst√®me existant
const generateFinalizedProject = (definition: ProjectDefinition) => {
  const projectId = `custom-${Date.now()}`
  
  return {
    id: projectId,
    nom: definition.nom || 'Mon Projet SaaS',
    description: definition.description || 'Projet SaaS personnalis√©',
    probleme_resolu: definition.probleme_resolu || 'R√©sout un probl√®me sp√©cifique',
    stack_technique: definition.stack_preferee || 'React/Next.js',
    complexite: definition.niveau_technique === 'D√©butant' ? 'simple' : 
                definition.niveau_technique === 'Expert' ? 'advanced' : 'medium',
    temps_dev: definition.temps_disponible || '4-6 semaines',
    mrr_arr: '√Ä d√©finir',
    type_marche: definition.utilisateurs_cibles?.toLowerCase().includes('entreprise') ? 'b2b' : 'b2c',
    cdc: `Projet personnalis√© : ${definition.nom}\n\nDescription : ${definition.description}\n\nProbl√®me r√©solu : ${definition.probleme_resolu}`,
    finalizedAt: new Date().toISOString(),
    // Champs additionnels pour compatibilit√©
    domaine: 'Projet personnalis√©',
    potentiel: 'üî•üî•',
    tags: ['projet-personnel', 'custom'],
    date_ajout: new Date().toISOString().split('T')[0],
    validee_par: 'Utilisateur',
    score: 85,
    why_replicable: 'Projet d√©fini par l\'utilisateur selon ses besoins sp√©cifiques',
    est_vibe_coding: true
  }
}

export async function POST(request: NextRequest) {
  try {
    const { messages, userMessage, currentDefinition, action, projectDefinition }: CreateProjectRequest = await request.json()
    
    // Si c'est une action de finalisation
    if (action === 'finalize' && projectDefinition) {
      const finalizedProject = generateFinalizedProject(projectDefinition)
      
      return NextResponse.json({
        success: true,
        finalizedProject: finalizedProject
      })
    }
    
    if (!messages || !userMessage || !currentDefinition) {
      return NextResponse.json(
        { error: 'Donn√©es manquantes' },
        { status: 400 }
      )
    }

    // V√©rifier la cl√© API
    if (!XAI_API_KEY) {
      return NextResponse.json(
        { error: 'Configuration API manquante' },
        { status: 500 }
      )
    }

    // Extraire les informations du message utilisateur
    const updatedDefinition = extractProjectInfo(userMessage, currentDefinition, messages)
    
    // Construire le prompt
    const prompt = buildProjectDefinitionPrompt(userMessage, updatedDefinition, messages)
    
    console.log('ü§ñ D√©finition de projet avec Grok...')

    // Construire l'historique des messages pour le contexte
    const conversationHistory = messages.slice(-6).map(msg => ({
      role: msg.role === 'user' ? 'user' : 'assistant',
      content: msg.content
    }))

    const response = await fetch(GROK_API_URL, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${XAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: GROK_MODEL,
        messages: [
          {
            role: 'system',
            content: `Tu es une IA sp√©cialis√©e dans la d√©finition de projets SaaS. Tu poses des questions pr√©cises pour comprendre parfaitement le projet de l'utilisateur.

üéØ TON R√îLE : COMPRENDRE LE PROJET

M√âTHODOLOGIE :
1. üéß √âCOUTE ACTIVE - Analyse chaque r√©ponse attentivement
2. ü§î QUESTIONS CIBL√âES - Pose UNE question pr√©cise √† la fois
3. ‚úÖ VALIDATION - Reformule pour confirmer ta compr√©hension
4. üéØ PROGRESSION - Avance √©tape par √©tape vers la d√©finition compl√®te

INFORMATIONS √Ä COLLECTER :
- Nom du projet
- Description d√©taill√©e
- Probl√®me r√©solu
- Utilisateurs cibles
- Fonctionnalit√©s principales
- Stack technique pr√©f√©r√©e
- Niveau de d√©veloppement
- Contraintes (temps, budget)

STYLE :
- Bienveillant et encourageant
- Questions simples et claires
- Une question √† la fois
- Valide la compr√©hension
- Reste focus sur l'essentiel

√âVITE :
- Questions multiples en une fois
- Jargon technique complexe
- Suppositions sur les besoins
- R√©ponses trop longues`
          },
          ...conversationHistory.slice(0, -1),
          {
            role: 'user',
            content: prompt
          }
        ],
        stream: false,
        temperature: 0.3,
        max_tokens: 800
      })
    })

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}))
      console.error('‚ùå Erreur API Grok:', response.status, errorData)
      
      return NextResponse.json(
        { error: `Erreur API Grok: ${response.status}` },
        { status: response.status }
      )
    }

    const data = await response.json()
    const aiResponse = data.choices[0].message.content.trim()
    
    // V√©rifier si le projet est complet
    const projectComplete = isProjectComplete(updatedDefinition)
    
    console.log('‚úÖ R√©ponse de d√©finition g√©n√©r√©e')
    
    return NextResponse.json({
      success: true,
      response: aiResponse,
      updatedDefinition: updatedDefinition,
      isProjectComplete: projectComplete
    })

  } catch (error) {
    console.error('‚ùå Erreur lors de la d√©finition:', error)
    return NextResponse.json(
      { error: 'Erreur interne du serveur' },
      { status: 500 }
    )
  }
}
